{"docstore/metadata": {"e6d184c6-5417-4c8f-a704-219acc25fa2f": {"doc_hash": "72cb1f2ccd7459b01099b68bb6653cc2536c88b4e7e8b5d06eb552fa178c9606"}, "a8fbcd48-9dc5-4115-8d9b-bb1373cf7e9b": {"doc_hash": "1dc661cc69f6646e70caefa998d88f326e54abbb3bb3fc3017c6f23c21658148"}, "c37f3d0f-b47c-400e-8eb2-5f35dfd0ba79": {"doc_hash": "18214946df53351fe839c530a62682f3d87f9a21c55a15b3f8fc2ca83d3c981f"}, "8063e8e1-ce77-4621-b6bc-6b80374ac414": {"doc_hash": "c32183c1f74a8fa3cfa6852944db26bdee3331e82303b08c9a8eaf712768b7e8"}, "541b76d7-3ce9-4e5c-99f2-35af46205ff7": {"doc_hash": "112fcb3466285925c4623a7a1ea180d77e0b95ff3527c32bd9f5d6852743951c"}, "5be01b21-15b5-4ab7-9938-38b0554099a9": {"doc_hash": "0ea4d938470ae737a7eefbbd5454c3c287e69c85bbe0a515b3f506cd397b761a"}, "a0e50ded-3152-43c8-bf7b-afe5d6ac99b1": {"doc_hash": "66e02026a053b107a7d3591aa1c1f61bee243ad039bfe8434799cd39348c19a6"}, "6fab5c9e-3d5a-48a2-8a9b-86ad7d2f5042": {"doc_hash": "5bcc4e253402c4326298383cfd4354afbf3244433fa6075c9f00454107567083"}, "58ceff2b-4366-49e2-aa76-d8305175e282": {"doc_hash": "ff8af35f2d645afe896428764340bbfe80e34c2127f7f24f764f74daa7d3756a"}, "289043ee-342c-4484-9846-9a681d6ad26e": {"doc_hash": "d5b4bce771169427ef32ef16413caf07381ad3b214c1020eed1cecb78d9c7b8b"}, "68212065-8205-464b-9d09-e488b76878d1": {"doc_hash": "72cb1f2ccd7459b01099b68bb6653cc2536c88b4e7e8b5d06eb552fa178c9606", "ref_doc_id": "e6d184c6-5417-4c8f-a704-219acc25fa2f"}, "225c9c8e-2996-4043-bf0f-a1244d67d187": {"doc_hash": "1dc661cc69f6646e70caefa998d88f326e54abbb3bb3fc3017c6f23c21658148", "ref_doc_id": "a8fbcd48-9dc5-4115-8d9b-bb1373cf7e9b"}, "4f761452-24a7-44d3-9ba6-a32bd23d8528": {"doc_hash": "18214946df53351fe839c530a62682f3d87f9a21c55a15b3f8fc2ca83d3c981f", "ref_doc_id": "c37f3d0f-b47c-400e-8eb2-5f35dfd0ba79"}, "77b15c90-069a-4233-94be-df35dba7d872": {"doc_hash": "c32183c1f74a8fa3cfa6852944db26bdee3331e82303b08c9a8eaf712768b7e8", "ref_doc_id": "8063e8e1-ce77-4621-b6bc-6b80374ac414"}, "4608910c-759f-49c3-8330-37db1d6ea887": {"doc_hash": "112fcb3466285925c4623a7a1ea180d77e0b95ff3527c32bd9f5d6852743951c", "ref_doc_id": "541b76d7-3ce9-4e5c-99f2-35af46205ff7"}, "5d5b0ad8-b8b9-46a2-b58d-c87b0b4b90b7": {"doc_hash": "0ea4d938470ae737a7eefbbd5454c3c287e69c85bbe0a515b3f506cd397b761a", "ref_doc_id": "5be01b21-15b5-4ab7-9938-38b0554099a9"}, "7e0f8bc6-8a0c-438d-a4a4-bf10a4a077eb": {"doc_hash": "66e02026a053b107a7d3591aa1c1f61bee243ad039bfe8434799cd39348c19a6", "ref_doc_id": "a0e50ded-3152-43c8-bf7b-afe5d6ac99b1"}, "11047523-d3c3-4d3b-b2f9-75e74ebe3557": {"doc_hash": "5bcc4e253402c4326298383cfd4354afbf3244433fa6075c9f00454107567083", "ref_doc_id": "6fab5c9e-3d5a-48a2-8a9b-86ad7d2f5042"}, "54bd15e2-ee74-424c-81c0-d9d40e280029": {"doc_hash": "ff8af35f2d645afe896428764340bbfe80e34c2127f7f24f764f74daa7d3756a", "ref_doc_id": "58ceff2b-4366-49e2-aa76-d8305175e282"}, "73bb651c-3491-4b88-9203-b4f0dbd18c97": {"doc_hash": "d5b4bce771169427ef32ef16413caf07381ad3b214c1020eed1cecb78d9c7b8b", "ref_doc_id": "289043ee-342c-4484-9846-9a681d6ad26e"}}, "docstore/data": {"68212065-8205-464b-9d09-e488b76878d1": {"__data__": {"id_": "68212065-8205-464b-9d09-e488b76878d1", "embedding": null, "metadata": {"page_label": "1", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6d184c6-5417-4c8f-a704-219acc25fa2f", "node_type": "4", "metadata": {"page_label": "1", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "72cb1f2ccd7459b01099b68bb6653cc2536c88b4e7e8b5d06eb552fa178c9606", "class_name": "RelatedNodeInfo"}}, "text": "Assignment 5: chArm-v2 System Emulator\nC S 429, Spring 2024\nUnique ID: 50855, 50860, 50865, 50870, 50875, 50880, 50884\nLead TAs: Kiran Chandrasekhar, Kavya Rathod, Prithvi Jamadagni\nAssigned: Friday, 29 March 2024 21:00 CT\nCheckpoint 1 submission: Thursday, 11 April 2024 23:59 CT\nCheckpoint 2 submission: Thursday, 18 April 2024 23:59 CT\nCheckpoint 3 submission: Thursday, 25 April 2024 23:59 CT\nLast possible hand-in: Saturday, 27 April 2024 23:59 CT\n1 Introduction\nIn this lab, you will be implementing several simulators:\n\u2022ae, a set of individual hardware elements emulating hardware, including a register file for writ-\ning/reading register values and an ALU (Arithmetic Logical Unit) to perform computations;\n\u2022psim , a standalone simulator for the PIPE implementation of the chArm-v2 instruction set architec-\nture (ISA), assuming an ideal memory system;\n\u2022csim , a standalone trace-driven cache simulator for a simple two-level memory hierarchy; and\n\u2022pcsim , an integrated \u201cPIPE-with-CACHE\u201d simulator, by enhancing psim to handle variable delays\nin the memory stage, and connecting it to csim , resulting in a simulator for the PIPE implementation\nof the chArm-v2 ISA with a simple two-level memory hierarchy.\nThe common executable that you will create will be named se. You will be working on the aeand\npsim aspects of it in the first two weeks, upgrading the psim in the third week, and on the csim and\npcsim aspects in the fourth week.\nOutcomes you will gain from this lab include the following:\n\u2022 You will understand how the SEQ and PIPE- implementations of chArm-v2 work. You will under-\nstand the utilities of each stage and how they are connected to each other.\n\u2022 You will understand how the PIPE implementation of chArm-v2 works. You will understand how\nstalling, squashing, and forwarding help resolve different hazard conditions.\n\u2022 You will understand the impact that cache memories can have on the performance of programs.\n\u2022 You will understand the additional changes that need to be made to the PIPE implementation to ac-\ncommodate a (semi-)realistic memory hierarchy.\n1", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "225c9c8e-2996-4043-bf0f-a1244d67d187": {"__data__": {"id_": "225c9c8e-2996-4043-bf0f-a1244d67d187", "embedding": null, "metadata": {"page_label": "2", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8fbcd48-9dc5-4115-8d9b-bb1373cf7e9b", "node_type": "4", "metadata": {"page_label": "2", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "1dc661cc69f6646e70caefa998d88f326e54abbb3bb3fc3017c6f23c21658148", "class_name": "RelatedNodeInfo"}}, "text": "2 Logistics\nThis assignment lasts for four weeks, with three separate submissions. You are required to perform three\nsubmissions:\n\u2022 AE and PIPE-, due by Thursday, 11 April 2024 23:59 CT.\n\u2022 PIPE, due by Thursday, 18 April 2024 23:59 CT.\n\u2022 CSIM and PCSIM, due by Thursday, 25 April 2024 23:59 CT.\nStart early enough to get the assignment done before the due date. Assume things will not go accord-\ning to plan, and so you must allow extra time for heavily loaded systems, dropped internet connections,\ncorrupted files, traffic delays, minor health problems, force majeure , etc.\nThis is an individual or partner project. If you choose to work in pairs, the team may use as many slip\ndays as the partner with the fewest available slip days. That is, if you have two slip days and your partner\nhas three, the team gets two slip days to use for the entire assignment. Both partners will be charged for any\nslip days used. Note that using slip days for a checkpoint does not adjust any future due dates. Choose your\npartner well; you will not be allowed to split up during the project. Partners on a team do not have to be\nfrom the same section of the class.\nAll hand-ins are electronic. You may do your coding on any machine you choose, but it is your respon-\nsibility to test this assignment for correct build/execution on an UTCS 64-bit x86-64 Linux machine before\nyour final hand-in. You may not share your work on lab assignments with other students outside your team,\nbut feel free to ask instructors for help (e.g., during office hours or discussion sections). Unless it is an\nimplementation-specific question (i.e., private to instructors), please post it on Ed Discussion publicly so\nthat students with similar questions can benefit as well.\nBefore you begin, please take the time to review the course policy on academic integrity at: https:\n//www.cs.utexas.edu/academics/conduct . Don\u2019t copy code from anywhere; do it yourself.\nThis discipline is very important for this class and next classes.\nAny updates for this lab will be posted on Canvas. Any clarifications or corrections for this lab will be\nposted on Ed Discussion.\n3 Download and Setup\nGo to the GitHub Classroom assignment page found at: https://classroom.github.com/a/\nXrpvB4pG . You will be able to clone your assignment to a lab machine as usual. Also note that since\nyou can work in pairs, GitHub Classroom may prompt you to enter who you are working with to set up your\nrepository with them. You will only need one repository for submitting, but if both you and your partner\nmake one, just decide whose to submit later on.\n4 Assignment Details\n4.1 Repository Structure\nNow that you have your private repository of the code base, confirm that you have the following subdirec-\ntories within it.\n2", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2765, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f761452-24a7-44d3-9ba6-a32bd23d8528": {"__data__": {"id_": "4f761452-24a7-44d3-9ba6-a32bd23d8528", "embedding": null, "metadata": {"page_label": "3", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c37f3d0f-b47c-400e-8eb2-5f35dfd0ba79", "node_type": "4", "metadata": {"page_label": "3", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "18214946df53351fe839c530a62682f3d87f9a21c55a15b3f8fc2ca83d3c981f", "class_name": "RelatedNodeInfo"}}, "text": "\u2022include : This subdirectory contains all the header files needed for this project. It contains three subdi-\nrectories: pipe , which contains the header files needed for the pipelined processor implementation;\ncache , which contains the header files needed for the cache simulator; and base , which contains\nthe header files needed for the underlying simulator.\n\u2022src: This subdirectory contains all the source code files needed for this project. It contains four\nsubdirectories: pipe , which contains the source code files needed for the pipelined processor imple-\nmentation; cache , which contains the source code files needed for the cache simulator; base , which\ncontains the source code files needed for the underlying simulator; and testbench , which contains\nthe source code of the executables you can use to compare your simulator to the provided reference.\nTo complete the hardware elements in AE, you will modify the file src/base/hw_elts.c .\nTo complete the pipelined processor emulator psim in PIPE, you will modify the following files:\ninstr_Fetch.c ,instr_Decode.c ,instr_Execute.c ,instr_Memory.c ,\ninstr_Writeback.c ,forward.c , and hazard_control.c . All of these files are located\nin the src/pipe directory.\nTo complete the standalone cache simulator csim for the CSIM deliverable, you will modify only the\nfilesrc/cache/cache.c .\nTo complete the final pcsim , you will further modify only these files.\n\u2022testcases : This subdirectory contains test cases for testing your emulator. The basics ,alu,mem,\nbranch ,exceptions , and applications subdirectories nested inside contain assembly .s\nfiles, disassembled .od files, and ELF binaries that are used to test your simulator. Some of these\ndirectories are further subdivided into simple ,hazard , andhard , which narrow the focus of the\ntests. Finally, the cache subdirectory contains memory trace files similar to those that you used in\nMM Lab, which are used to test your cache simulator.\n4.2 Simulator Quirks\nThere are a few things in the simulator that you would not find in normal hardware, so we would like to note\nthem here.\nFirst, it is important to note that hlt is a privileged instruction, and gcc won\u2019t typically compile files\nwith that instruction. To shut down the emulator, we instead check for a ret instruction with a return\naddress of 0, which we turn into an emulated HLT instruction that stops the simulator after it reaches the\nwriteback stage. This functionality is implemented for you in src/pipe/instr_Fetch.c , and you\nonly need to pass the generated STAT_HLT through the pipeline for it to work.\nSecond, we need ways to view the state of the machine during a program\u2019s execution for our testing\npurposes, so we have special \u201ctrap\u201d addresses defined for this purpose. In src/base/mem.c , you can\nfindIO_CHAR_ADDR andCHECKPOINT_ADDR defined. A load from CHECKPOINT_ADDR will log the\nmachine state to a provided \u201ccheckpoint file\u201d (more on this later), and a store to IO_CHAR_ADDR will print\nthe stored register\u2019s contents to the terminal.\n5 Programming Tasks\nThis lab is a sequence of two programming parts. In Checkpoint 1, you will implement ae, an architec-\nture element emulator (ALU, register file, etc.) and psim , a PIPE- simulator. In Checkpoint 2, you will\n3", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3256, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77b15c90-069a-4233-94be-df35dba7d872": {"__data__": {"id_": "77b15c90-069a-4233-94be-df35dba7d872", "embedding": null, "metadata": {"page_label": "4", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8063e8e1-ce77-4621-b6bc-6b80374ac414", "node_type": "4", "metadata": {"page_label": "4", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "c32183c1f74a8fa3cfa6852944db26bdee3331e82303b08c9a8eaf712768b7e8", "class_name": "RelatedNodeInfo"}}, "text": "implement PIPE , In Checkpoint 3, you will implement pcsim , a \u201cPIPE-with-CACHE\u201d simulator, by im-\nplementing a cache simulator csim , enhancing psim to handle variable delays in the memory stage, and\nconnecting them to each other.\nThe assignment carries 16 points: 8 points for the first submission and four for each of the other two.\nYour submission will be auto-graded based on its ability to correctly execute the test cases for the corre-\nsponding week.\nThis Wiki page is work in progress to help you understand the code base that we have given you, and\nwhat you need to it. It will be updated on an ongoing basis through the assignment.\n5.1 Part A: Implementing psim , A Simulator for the PIPE Implementation\nThe goal for Part A is to implement a PIPE simulator as described in class. You are going to complete\nthe code in files instr_Fetch.c ,instr_Decode.c ,instr_Execute.c ,instr_Memory.c ,\ninstr_Writeback.c ,forward.c , and hazard_control.c , all of which are located in the di-\nrectory src/pipe . You will need to complete all functions in the files that are marked as \u201cSTUDENT\nTO-DO\u201d. The hardware elements you need are implemented for you in src/base/hw_elts.c .\n5.1.1 Architecture Emulator\nStart by implementing the hardware elements in the hw_elts.c file. These emulate modules found in the\nhardware that will be called upon in your pipeline. Once you do these correctly, you will be able to pass all\nthe tests in the bin/test-ae testbench.\nYou are required to implement three functions that emulate three hardware modules for your AE simu-\nlator:\n\u2022cond holds() : This module determines if a given condition code is met based on the NCZV flag\nstate. This should not be directly invoked from your pipeline emulator.\n\u2022alu: This module computes bitwise and mathematical operations like addition or shifts, and sets\nthe NCZV flags accordingly. This module will also invoke the cond_holds() module to set a\ncondition value.\n\u2022regfile : This module will allow you to simultaneously read and write to registers. Take care to\nhandle writes to and reads from the SP and XZR registers properly, which are not general-purpose.\nAE will need to be complete for the PIPE- implementation to function properly. If in doubt, read the\nARM manual linked on the syllabus page.\n5.1.2 Testing AE\nMake your testbench test-ae in the usual manner: make clean; make . There is no standalone ae\nexecutable. The standard set of make targets that we have been using all semester long are also used in this\nassignment.\nRun your test-ae executable using the command line\nbin/test-ae -v <verbosity-level>\n4", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4608910c-759f-49c3-8330-37db1d6ea887": {"__data__": {"id_": "4608910c-759f-49c3-8330-37db1d6ea887", "embedding": null, "metadata": {"page_label": "5", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "541b76d7-3ce9-4e5c-99f2-35af46205ff7", "node_type": "4", "metadata": {"page_label": "5", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "112fcb3466285925c4623a7a1ea180d77e0b95ff3527c32bd9f5d6852743951c", "class_name": "RelatedNodeInfo"}}, "text": "The verbosity level can be 0, 1, or 2 (default: 0) and will control how much diagnostic output you will see.\nVerbosity level 2 will stop your the testbench and print the current and expected state after a failure; this will\nenable you to determine which inputs cause your hardware modules to fail and allow you to intuit why.\nDebug your program in the normal manner using gdb directly on the testbench.\n5.1.3 Basic Pipelined Implementation\nNext, create the simpler PIPE- implementation we have discussed in class. If you do this correctly, you will\nbe able to pass all the tests in the testcases/basics andtestcases/ */simple directories.\nYou are required to implement five functions that emulate five stages for your PIPE- simulator:1\n\u2022fetch instr() : Fetch stage (including PC update actions).\n\u2022decode instr() : Decode stage.\n\u2022execute instr() : Execute stage.\n\u2022memory instr() : Memory stage.\n\u2022wback instr() : Write-back stage.\nThere are a number of other functions in this file that correspond to the various logic blocks discussed in\nclass. You must implement these functions as well, and then \u201cwire them up\u201d appropriately within the stage\nlogic.\nThe fields of the pipeline registers are defined in include/pipe/instr_pipeline.h in several\nstruct types *_instr_impl_t andpipe_reg_t . The \u201cclocking\u201d of these registers is handled for\nyou in src/base/proc.c . When implementing the combinational logic for a pipeline stage, you will be\npassed in the appropriate structs as your input and output arguments, which are named inandout. There\nare also a few global variables that represent the \u201cbackwards\u201d wires sent from one stage to a prior stage,\nwhich you will need to update as well.\n5.1.4 Hazard Control\nFor the second week, you are also required to implement stalling, squashing, and forwarding to deal with\ndata hazards and control hazards, as discussed in class. For forwarding, add your implementation in\nsrc/pipe/forward.c and then call the resulting function(s) from src/pipe/instr_Decode.c .\nFor stalling, implement the four functions in src/pipe/hazard_control.c , which is called for you\ninsrc/base/proc.c . You are responsible for setting up the correct stall andbubble signals for\neach pipeline stage at each cycle. The task of taking the appropriate actions on the pipeline registers based\non these signals is handled for you.\n1In hardware, all the stages would execute concurrently for multiple instructions in a single cycle of a PIPE implementation.\nSince C code is executed sequentially, however, the stages run in reverse order (decode stage after execute and memory stages, and\nmemory stage before execute) in order to propagate forwarding values properly among these multiple executions in flight through\nthe pipeline. This ordering is already handled correctly in the starter code; you do not need to worry about it.\n5", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d5b0ad8-b8b9-46a2-b58d-c87b0b4b90b7": {"__data__": {"id_": "5d5b0ad8-b8b9-46a2-b58d-c87b0b4b90b7", "embedding": null, "metadata": {"page_label": "6", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5be01b21-15b5-4ab7-9938-38b0554099a9", "node_type": "4", "metadata": {"page_label": "6", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "0ea4d938470ae737a7eefbbd5454c3c287e69c85bbe0a515b3f506cd397b761a", "class_name": "RelatedNodeInfo"}}, "text": "5.1.5 Testing\nMake your seexecutable in the usual manner: make clean; make . The standard set of make targets\nthat we have been using all semester long are also used in this assignment.\nRun your seexecutable using the command line\nbin/se -i <testfile-path> -v <verbosity-level> -l <cycle-limit>\n-c <checkpoint-file>\nwhere the i flag is mandatory, but the rest are optional. The verbosity level can be 0, 1, or 2 (default: 0) and\nwill control how much diagnostic output you will see. The cycle limit can be an integer greater than 0, and\nwill set the limit on the number of cycles your simulator can run for. Its default value is 500, and most tests\ndo not require more than this, save for some of the ones in hard directories. The checkpoint file is a file\nthat will be overwritten with a \u201ccheckpoint\u201d of the machine state when the program ends or attempts to load\nfromCHECKPOINT_ADDR .\nDebug your program in the normal manner using gdb. There is also a provided se-ref executable for\neach checkpoint that you can use (with the same arguments as se) to check the correct output of a test case.\nOr you can run an exhaustive test with test-se .\n5.1.6 Visualization\nA pipeline visualization tool is provided for PIPE- and PIPE. This tool is NOT a replacement for proper\ndebugging via gdb; however, this may help you find in which instruction a testcase goes wrong. Also, this\ntool is brand-new this semester, and is therefore likely to be buggier than the other parts of the assignment.\nTo run the visualization, you will need to download the visualization folder and its contents to\nyour local machine . You only need to do this step the first time.\nNext, use the command line:\n./launch_vis_run.sh bin/se -i <testfile-path> -v <specify value larger than 0>\non your remote UTCS machine each time you want to visualize a testcase. The verbosity level must be\ngreater than 0. This will start a node server on the remote machine; make sure to stop the server with\nCTRL-C after you are done looking at the visualization.\nIf using the terminal in Visual Studio Code, you may skip this next step. If not, then run the command\nline:\nssh -N -f -L localhost:8080:localhost:8080 <USERNAME@REMOTE_MACHINE>\non your local machine . This will forward the remote port to your local port, allowing you to access the\nresults of your remote pipeline code. VSCode will usually handle this automatically.\nFinally, open the index.html file in any browser on your local machine. We have tested on Firefox\nand Chromium-based browsers (Safari, Chrome, etc.).\n5.1.7 Submission\nSubmit your checkpoint version using Gradescope, by providing a pointer to the private GitHub repository\nwhere you have done your work. Remember to include your partner in your submission, if you have one.\nClearing week 1 corresponds to your correctly running the test programs in the testcases/basics\nandtestcases/ */simple subdirectories, as well as the bin/test-ae testbench. Clearing week\n6", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2943, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e0f8bc6-8a0c-438d-a4a4-bf10a4a077eb": {"__data__": {"id_": "7e0f8bc6-8a0c-438d-a4a4-bf10a4a077eb", "embedding": null, "metadata": {"page_label": "7", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0e50ded-3152-43c8-bf7b-afe5d6ac99b1", "node_type": "4", "metadata": {"page_label": "7", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "66e02026a053b107a7d3591aa1c1f61bee243ad039bfe8434799cd39348c19a6", "class_name": "RelatedNodeInfo"}}, "text": "2 corresponds to your correctly running test programs in the testcases/ */hazard subdirectories.\nPlease note that correctly running test programs means we will match the checkpoint files generated by a\nreference simulator and your implementation. Printing the same value to the terminal as the reference does\nnot guarantee that your implementation is correct, though it should at least be a decent hint. The utility\ntest-se is provided to specify which tests correspond to which week, as well as which tests are passing.\n5.1.8 Evaluation\nPart A of the assignment counts for twelve points: two for the basic AE implementation (week 1), six for the\nbasic PIPE- implementation (weeks 1 and 2), and four for the full PIPE implementation including handling\nhazards and forwarding values (week 3). Partial credit is given where applicable, so you will earn points for\neach individual test passed.\n5.1.9 Expected work schedule\nYou are given two weeks for PIPE-, and are expected to use those two weeks as needed. PIPE- has his-\ntorically been a very difficult and long assignment, with many possibilities for bugs. It is expected that the\nAE aspect should be brief and finished within the beginning of the first week, with the rest being alotted to\nPIPE-. Once you have completed implementing PIPE-, updating it to PIPE should involve very localized\nchanges.\n5.2 Part B: Implementing pcsim , A Simulator for the PIPE Implementation with A Simple\nMemory Hierarchy\nIn this part, you will first write a standalone cache controller simulator csim and test it against a number of\nmemory traces. Correctness will be determined by matching the cache events generated by your simulator\nagainst a reference. You will then augment psim and connect it to csim to produce pcsim .\n5.2.1 Implementation and Testing\n\u2022 Start your work in the cache directory.\n\u2022 Implement the get_line() andselect_line() helper functions in the file cache.c . Imple-\nment the check_hit() andhandle_miss() routines in the file cache.c . This will give you a\nskeletal cache simulator that implements the control actions (the three-state finite-state machine cache\ncontroller discussed in class) of a write-back cache with LRU replacement and write-allocate policies,\nfor arbitrary numbers of sets, associativity values, and block sizes.\n\u2022 You can assume that each cache read/write only accesses one single cache line.\n\u2022 Test your code by running make and running test-csim . Your implementation is correct when the\ntest score printed out is 40/40.\n\u2022 Implement the functions get_word_cache() andset_word_cache() in the file cache/cache.c .\nAfter completing this task, you will have a fully functional cache simulator that implements both the\ncontrol and the data portions of the cache.\n7", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11047523-d3c3-4d3b-b2f9-75e74ebe3557": {"__data__": {"id_": "11047523-d3c3-4d3b-b2f9-75e74ebe3557", "embedding": null, "metadata": {"page_label": "8", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fab5c9e-3d5a-48a2-8a9b-86ad7d2f5042", "node_type": "4", "metadata": {"page_label": "8", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "5bcc4e253402c4326298383cfd4354afbf3244433fa6075c9f00454107567083", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 Integrate the memory hierarchy simulator into the PIPE simulator by making the appropriate changes\nin the files that you updated for Part A. This should involve no more than updating the data memory\nroutines to the corresponding cache routines and handling stalls resulting from cache misses.\n\u2022 Test the correctness of the combined simulator using test-se . Several ELF binaries will be run\nwith a few different cache configurations. You may test these yourself by adding the flags\n-A <associativity> -B <line-size> -C <capacity> -d <delay-cycles> to any\ntest from before.\n5.2.2 Submission\nSubmit your final version using Gradescope, by providing a pointer to the private GitHub repository where\nyou have done your work. As before, remember to include your partner in your submission, if you have one.\n5.2.3 Evaluation\nPart B of the assignment counts for four points: three for implementing the cache and achieving 40/40 on\nthe cache test (week 3), and one for integrating the cache with the PIPE implementation and passing the\ntests in the testcases/ */hard subdirectories (week 4). Partial credit is given where applicable, so you\nwill earn points for each individual test passed. We will use test-se to test your integrated simulator.\n6 Extra Credit (Optional)\nTwo options for extra credit are offered on this lab, with up to 2 points assigned to each. Each is to be\nsubmitted along the final week of SE Lab.\n6.1 Application: Matrix Multiplication\n2 points\nTo explore the effects of the cache in a real application, we consider several implementations of matrix-\nmatrix multiplication in the tests applications/hard/gemm_ijk ,applications/hard/gemm_ikj ,\nandapplications/hard/gemm_block . These tests take two 64 \u00d764 matrices and multiply them,\nstoring the result in another 64 \u00d764 matrix.\nNote that these tests take several million cycles to run to completion, so you need to give them several\nseconds to finish running. For this reason, do NOT run your simulator with the verbose -v flag enabled, or\nelse you will create several Gigabyte-sized files and waste large amounts of space on the lab machines.\nUsing these tests and your seexecutable, answer the following questions. You may use the se-ref\nexecutable if you are unable to pass all checkpoint 3 tests with your implementation.\n\u2022 To start, run the tests without the cache enabled. You should set the cycle limit to 8,000,000 with the\n-lflag in order to bypass the default limit of 500. You can filter the output to a checkpoint file to\nview the number of cycles the simulator runs for, so an example command would be bin/se\n-i testcases/applications/hard/gemm_ijk -c checkpoint.out -l 8000000 .\nNote the number of cycles it takes to run each test to completion. Which of the three tests runs in the\nfewest number of cycles? Which of the three runs in the greatest number of cycles? Provide some\nintuition on why this behavior occurs.\n8", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2900, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54bd15e2-ee74-424c-81c0-d9d40e280029": {"__data__": {"id_": "54bd15e2-ee74-424c-81c0-d9d40e280029", "embedding": null, "metadata": {"page_label": "9", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58ceff2b-4366-49e2-aa76-d8305175e282", "node_type": "4", "metadata": {"page_label": "9", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "ff8af35f2d645afe896428764340bbfe80e34c2127f7f24f764f74daa7d3756a", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 Next, run the tests with cache parameters [A,B,C,d] = [4,32,512,100] . Modern processors\ntypically suffer a loss on the order of 100 cycles on a cache miss when the requested data is in DRAM,\nso this configuration more closely mimics a real scenario. You will now need to increase the cycle\nlimit to 40,000,000 in order to allow the simulator to run to completion, so the example command\nfrom before becomes bin/se -i testcases/applications/hard/gemm_ijk\n-c checkpoint.out -l 40000000 -A 4 -B 32 -C 512 -d 100 . Note the number\nof cycles it takes to run each test to completion. Now which test runs in the fewest/greatest number of\ncycles? Has this changed from before? Use the memory access patterns of each test to explain why\nthe results did or did not change.\n\u2022 Next, run the tests with different, but reasonable, values for cache parameters [A,B] . Keep parame-\nters[C,d] = [512,100] . Run each test once more, and answer the same questions as before.\n\u2022 Next, attempt to find the most inefficient combination of loop ordering (gemm testcase) and cache\nlayout (with parameters [C,d] = [512,100] ). Leverage your understanding of memory stride\naccess patterns and cache structures to find this.\n\u2022 Finally, create a writeup of your answers and observations from each part. Include graphs of cycle\ncount data for each run and the cache parameters used.\n\u2022 There will be a separate week 4 assignment on Gradescope for you to submit answers to these ques-\ntions.\n6.2 chArm-v3\nYou will be upgrading the system emulator to chArm-v3, a subset which includes various additional branch-\ning and conditional instructions. Many of these instructions introduce new hazards or invoke more registers\nthan those in chArm-v2.\n(1 point) Implement all of the following four instructions in your psim /pcsim .\n\u2022 CSEL\n\u2022 CSINV\n\u2022 CSINC\n\u2022 CSNEG\n(1 point) Implement all of the following four instructions in your psim /pcsim .\n\u2022 CBZ\n\u2022 CBNZ\n\u2022 BR\n\u2022 BLR\nImplementing chArm-v3 will require substantial changes to your hardware elements, pipeline, and haz-\nard control. Additionally, you will likely need to modify some function signatures. You may implement\nchArm-v3 in weeks 1 and 2, but chArm-v3 extra credit will be graded alongside checkpoint 3. Clearing\ncharm-v3 corresponds to your correctly running the test programs in the testcases/charmv3 subdi-\nrectory. Partial credit is given.\n9", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73bb651c-3491-4b88-9203-b4f0dbd18c97": {"__data__": {"id_": "73bb651c-3491-4b88-9203-b4f0dbd18c97", "embedding": null, "metadata": {"page_label": "10", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "289043ee-342c-4484-9846-9a681d6ad26e", "node_type": "4", "metadata": {"page_label": "10", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}, "hash": "d5b4bce771169427ef32ef16413caf07381ad3b214c1020eed1cecb78d9c7b8b", "class_name": "RelatedNodeInfo"}}, "text": "6.2.1 Testing\nTo test the AE changes for chArm-v3, you will use bin/test-ae -e . To test chArm-v3 as a whole, you\nwill use bin/test-se -w3 -e . You may also test chArm-v3 locally with checkpoint 2, but grading\nwill solely consider successful runs under checkpoint 3.\n6.3 Help\nVery little additional help will be given on extra credit options, either through the Wiki, Office Hours, or Ed\nDiscussion. When in doubt, read the manual, available on the course syllabus or the course slides, available\non Canvas. This should provide all the necessary information on the optional instructions and writeup,\nrespectively.\n10", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"e6d184c6-5417-4c8f-a704-219acc25fa2f": {"node_ids": ["68212065-8205-464b-9d09-e488b76878d1"], "metadata": {"page_label": "1", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "a8fbcd48-9dc5-4115-8d9b-bb1373cf7e9b": {"node_ids": ["225c9c8e-2996-4043-bf0f-a1244d67d187"], "metadata": {"page_label": "2", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "c37f3d0f-b47c-400e-8eb2-5f35dfd0ba79": {"node_ids": ["4f761452-24a7-44d3-9ba6-a32bd23d8528"], "metadata": {"page_label": "3", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "8063e8e1-ce77-4621-b6bc-6b80374ac414": {"node_ids": ["77b15c90-069a-4233-94be-df35dba7d872"], "metadata": {"page_label": "4", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "541b76d7-3ce9-4e5c-99f2-35af46205ff7": {"node_ids": ["4608910c-759f-49c3-8330-37db1d6ea887"], "metadata": {"page_label": "5", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "5be01b21-15b5-4ab7-9938-38b0554099a9": {"node_ids": ["5d5b0ad8-b8b9-46a2-b58d-c87b0b4b90b7"], "metadata": {"page_label": "6", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "a0e50ded-3152-43c8-bf7b-afe5d6ac99b1": {"node_ids": ["7e0f8bc6-8a0c-438d-a4a4-bf10a4a077eb"], "metadata": {"page_label": "7", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "6fab5c9e-3d5a-48a2-8a9b-86ad7d2f5042": {"node_ids": ["11047523-d3c3-4d3b-b2f9-75e74ebe3557"], "metadata": {"page_label": "8", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "58ceff2b-4366-49e2-aa76-d8305175e282": {"node_ids": ["54bd15e2-ee74-424c-81c0-d9d40e280029"], "metadata": {"page_label": "9", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}, "289043ee-342c-4484-9846-9a681d6ad26e": {"node_ids": ["73bb651c-3491-4b88-9203-b4f0dbd18c97"], "metadata": {"page_label": "10", "file_name": "selab.pdf", "file_path": "/Users/jeremychuah/convergent-education/backend/test/selab.pdf", "file_type": "application/pdf", "file_size": 122968, "creation_date": "2024-11-09", "last_modified_date": "2024-11-09"}}}}